{"version":3,"sources":["firebase.js","Components/Homepage.js","Components/LoginCard.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","database","Homepage","state","isLoading","itens","votes","handleVote","name","ref","once","snapshot","val","set","_this2","this","fetch","then","response","json","parsedJSON","setState","results","catch","err","console","log","on","_this3","map","item","react_default","a","createElement","ListItem_default","button","key","onClick","ListItemText_default","primary","secondary","CircularProgress_default","style","color","width","paddingTop","display","flexDirection","alignItems","className","List_default","maxHeight","overflowY","renderList","Component","styles","height","justifyContent","padding","marginBottom","marginTop","auth","user","password","LoginCard","authenticated","handleLogin","_this$state","_this","card","title","_this$state2","Homepage_Homepage","Card_default","Typography_default","variant","TextField_default","id","label","placeholder","margin","value","onChange","newValue","target","type","Button_default","App","LoginCard_LoginCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qXASeA,EATQ,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,GACfC,kBAAmB,gBCEvBC,IAASC,cAAcR,GACvB,IAAIS,EAAWF,IAASE,WAEHC,6MACjBC,MAAQ,CACJC,WAAW,EACXC,MAAO,GACPC,MAAO,MAiBXC,WAAa,SAACC,GACVP,EAASQ,MAAMC,KAAK,QAAS,SAACC,GAC1B,IAAML,EAAQK,EAASC,MACnBN,EAAME,GAGNP,EAASQ,IAAID,GAAMK,IAAKP,EAAME,GAAM,GAFpCP,EAASQ,IAAID,GAAMK,IAAI,0FAlBf,IAAAC,EAAAC,KAChBC,MAAM,sCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFN,EAAKO,SAAS,CACVhB,MAAOe,EAAWE,YAEvBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAE5BvB,EAASQ,MAAMkB,GAAG,QAAS,SAAChB,GACxBG,EAAKO,SAAS,CAAEf,MAAOK,EAASC,MAAOR,WAAW,2CAe7C,IAAAwB,EAAAb,KACT,OAAOA,KAAKZ,MAAME,MAAMwB,IAAI,SAAAC,GAAI,OAC5BC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,QAAM,EAACC,IAAKN,EAAKtB,KAAM6B,QAAS,kBAAMT,EAAKrB,WAAWuB,EAAKtB,QACjEuB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACIO,QAAST,EAAKtB,KACdgC,UAAYZ,EAAKzB,MAAMG,MAAMwB,EAAKtB,MAAS,UAAUoB,EAAKzB,MAAMG,MAAMwB,EAAKtB,MAAQ,iDAS/F,OAFsBO,KAAKZ,MAAnBC,UAEa2B,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAkBU,MAAO,CAACC,MAAO,UAElDZ,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAACE,MAAO,OAAQC,WAAY,GAAIC,QAAS,OAAQC,cAAe,SAAUC,WAAY,WAAlG,uBAEIjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,aACXlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAMU,MAAO,CAACS,UAAW,IAAKC,UAAW,SACpCrC,KAAKsC,uBApDQC,aCHhCC,EACI,CACFX,MAAO,IACPY,OAAQ,IACRV,QAAS,OACTC,cAAe,SACfC,WAAY,SACZS,eAAgB,SAChBC,QAAS,IARXH,EAUK,CACHI,aAAc,IAXhBJ,EAaM,CACJK,UAAW,IAIbC,EAAO,CACTC,KAAM,MACNC,SAAU,QAGOC,6MAEjB7D,MAAQ,CACJ2D,KAAM,GACNC,SAAU,GACVE,eAAe,KAGnBC,YAAc,WAAM,IAAAC,EACWC,EAAKjE,MAAxB2D,EADQK,EACRL,KAAMC,EADEI,EACFJ,SAEXD,IAAOD,EAAKC,MAAQC,IAAWF,EAAKE,UACnCK,EAAK/C,SAAS,CAAE4C,eAAe,IAC/BxC,QAAQC,IAAI,YACTD,QAAQC,IAAI,6GAGf,IAAAZ,EAAAC,KACIsD,EAAwBd,EAAlBe,EAAkBf,EAAXpB,EAAWoB,EAD5BgB,EAEsCxD,KAAKZ,MAAvC2D,EAFJS,EAEIT,KAAMC,EAFVQ,EAEUR,SAEd,OAJIQ,EAEoBN,cAGpBlC,EAAAC,EAAAC,cAACuC,EAAD,MAGAzC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAMU,MAAO2B,GACTtC,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,CAAY2C,QAAQ,WAAWjC,MAAO4B,GAAtC,0BAIAvC,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,CACI6C,GAAG,aACHC,MAAM,aACNC,YAAY,wBACZC,OAAO,SACPC,MAAOnB,EACPoB,SAAU,SAAAC,GAAQ,OAAIrE,EAAKO,SAAS,CAAEyC,KAAMqB,EAASC,OAAOH,WAGhElD,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,CACI6C,GAAG,0BACHC,MAAM,QACNO,KAAK,WACLL,OAAO,SACPC,MAAOlB,EACPmB,SAAU,SAAAC,GAAQ,OAAIrE,EAAKO,SAAS,CAAE0C,SAAUoB,EAASC,OAAOH,WAGpElD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CACI2C,QAAQ,YACRhC,MAAM,UACND,MAAOP,EACPE,QAAStB,KAAKmD,aAJlB,kBAhDuBZ,aCbxBiC,mLAVX,OACExD,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAAA,UAAQgB,UAAU,cAChBlB,EAAAC,EAAAC,cAACuD,EAAD,eANQlC,aCOEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,KAAK,SAAAqF,GACjCA,EAAaC","file":"static/js/main.20ad575b.chunk.js","sourcesContent":["const firebaseConfig = {\n    apiKey: \"AIzaSyAevKHm4TFHP0cEweh_kpJ7fW9smzHDEtw\",\n    authDomain: \"miniaula-react.firebaseapp.com\",\n    databaseURL: \"https://miniaula-react.firebaseio.com\",\n    projectId: \"miniaula-react\",\n    storageBucket: \"\",\n    messagingSenderId: \"158094825149\"\n}\n\nexport default firebaseConfig\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nimport firebase from 'firebase'\nimport firebaseConfig from '../firebase'\nfirebase.initializeApp(firebaseConfig)\nvar database = firebase.database()\n\nexport default class Homepage extends Component {\n    state = {\n        isLoading: true,\n        itens: [],\n        votes: [],\n    }\n\n    componentWillMount(){\n        fetch('https://pokeapi.co/api/v2/pokemon/')\n        .then(response => response.json())\n        .then(parsedJSON => {\n            this.setState({\n                itens: parsedJSON.results\n            })\n        }).catch(err => console.log(err))\n\n        database.ref().on('value', (snapshot) => {\n            this.setState({ votes: snapshot.val(), isLoading: false })\n        })\n    }\n\n    handleVote = (name) => {\n        database.ref().once('value', (snapshot) => {\n            const votes = snapshot.val()\n            if(!votes[name]){\n                database.ref(name).set(1)\n            } else {\n                database.ref(name).set( votes[name]+1 )\n            }\n        })\n    }\n\n    renderList() {\n        return this.state.itens.map(item => \n            <ListItem button key={item.name} onClick={() => this.handleVote(item.name)}>\n                <ListItemText \n                    primary={item.name} \n                    secondary={(this.state.votes[item.name]) ? 'Likes: '+this.state.votes[item.name] : 'Likes: 0'}\n                />\n            </ListItem>\n        )\n    }\n\n    render(){\n        const { isLoading } = this.state\n\n        if(isLoading) return <CircularProgress style={{color: '#FFF'}} />\n        return(\n            <div style={{width: '100%', paddingTop: 32, display: 'flex', flexDirection: 'column', alignItems: 'center'}} >\n                Lista de Pokémons\n                <div className=\"home-page\">\n                    <List style={{maxHeight: 500, overflowY: 'auto'}} >\n                        {this.renderList()}\n                    </List>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\n\nimport Homepage from './Homepage'\n\nconst styles = {\n    card: {\n        width: 300,\n        height: 400,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 32,\n    },\n    title: {\n        marginBottom: 32,\n    },\n    button: {\n        marginTop: 48,\n    }\n}\n\nconst auth = {\n    user: 'fog',\n    password: '1234'\n}\n\nexport default class LoginCard extends Component {\n\n    state = {\n        user: '',\n        password: '',\n        authenticated: true\n    }\n\n    handleLogin = () => {\n        const { user, password } = this.state\n\n        if(user===auth.user && password===auth.password){\n            this.setState({ authenticated: true })\n            console.log(\"Logou!!\")\n        } else console.log(\"Usuario ou senha inválidos...\")\n    }\n\n    render(){\n        const { card, title, button } = styles\n        const { user, password, authenticated } = this.state\n\n        if(authenticated) return (\n            <Homepage />\n        )\n        return(\n            <Card style={card} >\n                <Typography variant=\"headline\" style={title}>\n                    Fellowship of the Game\n                </Typography>\n\n                <TextField\n                    id=\"user-input\"\n                    label=\"Usuário\"\n                    placeholder=\"Digite seu usuário\"\n                    margin=\"normal\" \n                    value={user}\n                    onChange={newValue => this.setState({ user: newValue.target.value })}\n                />\n\n                <TextField\n                    id=\"standard-password-input\"\n                    label=\"Senha\"\n                    type=\"password\"\n                    margin=\"normal\"\n                    value={password}\n                    onChange={newValue => this.setState({ password: newValue.target.value })}\n                />\n\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\" \n                    style={button} \n                    onClick={this.handleLogin}\n                >\n                    Entrar\n                </Button>\n            </Card>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './App.css'\nimport 'typeface-roboto'\nimport LoginCard from './Components/LoginCard'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <LoginCard />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}